// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/services/pages/page.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Page_HomePage_FullMethodName     = "/services.Page/HomePage"
	Page_ResumePage_FullMethodName   = "/services.Page/ResumePage"
	Page_SoftwarePage_FullMethodName = "/services.Page/SoftwarePage"
)

// PageClient is the client API for Page service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PageClient interface {
	HomePage(ctx context.Context, in *HomePageRequest, opts ...grpc.CallOption) (*HomePageResponse, error)
	ResumePage(ctx context.Context, in *ResumePageRequest, opts ...grpc.CallOption) (*ResumePageResponse, error)
	SoftwarePage(ctx context.Context, in *SoftwarePageRequest, opts ...grpc.CallOption) (*SoftwarePageResponse, error)
}

type pageClient struct {
	cc grpc.ClientConnInterface
}

func NewPageClient(cc grpc.ClientConnInterface) PageClient {
	return &pageClient{cc}
}

func (c *pageClient) HomePage(ctx context.Context, in *HomePageRequest, opts ...grpc.CallOption) (*HomePageResponse, error) {
	out := new(HomePageResponse)
	err := c.cc.Invoke(ctx, Page_HomePage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageClient) ResumePage(ctx context.Context, in *ResumePageRequest, opts ...grpc.CallOption) (*ResumePageResponse, error) {
	out := new(ResumePageResponse)
	err := c.cc.Invoke(ctx, Page_ResumePage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pageClient) SoftwarePage(ctx context.Context, in *SoftwarePageRequest, opts ...grpc.CallOption) (*SoftwarePageResponse, error) {
	out := new(SoftwarePageResponse)
	err := c.cc.Invoke(ctx, Page_SoftwarePage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PageServer is the server API for Page service.
// All implementations must embed UnimplementedPageServer
// for forward compatibility
type PageServer interface {
	HomePage(context.Context, *HomePageRequest) (*HomePageResponse, error)
	ResumePage(context.Context, *ResumePageRequest) (*ResumePageResponse, error)
	SoftwarePage(context.Context, *SoftwarePageRequest) (*SoftwarePageResponse, error)
	mustEmbedUnimplementedPageServer()
}

// UnimplementedPageServer must be embedded to have forward compatible implementations.
type UnimplementedPageServer struct {
}

func (UnimplementedPageServer) HomePage(context.Context, *HomePageRequest) (*HomePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HomePage not implemented")
}
func (UnimplementedPageServer) ResumePage(context.Context, *ResumePageRequest) (*ResumePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumePage not implemented")
}
func (UnimplementedPageServer) SoftwarePage(context.Context, *SoftwarePageRequest) (*SoftwarePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SoftwarePage not implemented")
}
func (UnimplementedPageServer) mustEmbedUnimplementedPageServer() {}

// UnsafePageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PageServer will
// result in compilation errors.
type UnsafePageServer interface {
	mustEmbedUnimplementedPageServer()
}

func RegisterPageServer(s grpc.ServiceRegistrar, srv PageServer) {
	s.RegisterService(&Page_ServiceDesc, srv)
}

func _Page_HomePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageServer).HomePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Page_HomePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageServer).HomePage(ctx, req.(*HomePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Page_ResumePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageServer).ResumePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Page_ResumePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageServer).ResumePage(ctx, req.(*ResumePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Page_SoftwarePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoftwarePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PageServer).SoftwarePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Page_SoftwarePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PageServer).SoftwarePage(ctx, req.(*SoftwarePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Page_ServiceDesc is the grpc.ServiceDesc for Page service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Page_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.Page",
	HandlerType: (*PageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HomePage",
			Handler:    _Page_HomePage_Handler,
		},
		{
			MethodName: "ResumePage",
			Handler:    _Page_ResumePage_Handler,
		},
		{
			MethodName: "SoftwarePage",
			Handler:    _Page_SoftwarePage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/services/pages/page.proto",
}
